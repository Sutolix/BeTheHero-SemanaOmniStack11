{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/lotus/Documentos/React/BeTheHero/mobile/src/pages/Incidents/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Feather } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport api from \"../../services/api\";\nimport logoImg from \"../../assets/logo.png\";\nimport styles from \"./styles\";\nexport default function Incidents() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      incidents = _useState2[0],\n      setIncidents = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      total = _useState4[0],\n      setTotal = _useState4[1];\n\n  var _useState5 = useState(1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      page = _useState6[0],\n      setPage = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loading = _useState8[0],\n      setLoading = _useState8[1];\n\n  var navigation = useNavigation();\n\n  function navigateToDetail(incident) {\n    navigation.navigate('Detail', {\n      incident: incident\n    });\n  }\n\n  function loadingIncidents() {\n    var response;\n    return _regeneratorRuntime.async(function loadingIncidents$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!loading) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            if (!(total > 0 && incidents.length === total)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            setLoading(true);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(api.get('incidents', {\n              params: {\n                page: page\n              }\n            }));\n\n          case 7:\n            response = _context.sent;\n            setIncidents([].concat(_toConsumableArray(incidents), _toConsumableArray(response.data)));\n            setTotal(response.headers['x-total-count']);\n            setPage(page + 1);\n            setLoading(false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    loadingIncidents();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, React.createElement(Image, {\n    source: logoImg,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.headerText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Total de \", React.createElement(Text, {\n    style: styles.headerTextBold,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 20\n    }\n  }, total, \" casos\"), \".\")), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Bem-vindo!\"), React.createElement(Text, {\n    style: styles.description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Escolha um dos casos abaixo e salve o dia.\"), React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"#0000ff\",\n    animating: \"false\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), React.createElement(FlatList, {\n    data: incidents,\n    style: styles.incidentsList,\n    keyExtractor: function keyExtractor(incident) {\n      return String(incident.id);\n    },\n    showsVerticalScrollIndicator: false,\n    onEndReached: loadingIncidents,\n    onEndReachedThreshold: 0.2,\n    renderItem: function renderItem(_ref) {\n      var incident = _ref.item;\n      return React.createElement(View, {\n        style: styles.incident,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.incidentProperty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, \"ONG:\"), React.createElement(Text, {\n        style: styles.incidentValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, incident.name), React.createElement(Text, {\n        style: styles.incidentProperty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, \"CASO:\"), React.createElement(Text, {\n        style: styles.incidentValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, incident.title), React.createElement(Text, {\n        style: styles.incidentProperty,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, \"VALOR:\"), React.createElement(Text, {\n        style: styles.incidentValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, Intl.NumberFormat('pt-BR', {\n        style: 'currency',\n        currency: 'BRL'\n      }).format(incident.value)), React.createElement(TouchableOpacity, {\n        style: styles.detailsButton,\n        onPress: function onPress() {\n          return navigateToDetail(incident);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.detailsButtonText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }, \"Ver mais detalhes\"), React.createElement(Feather, {\n        name: \"arrow-right\",\n        size: 16,\n        color: \"#E02041\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }\n      })));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/lotus/Documentos/React/BeTheHero/mobile/src/pages/Incidents/index.js"],"names":["React","useState","useEffect","Feather","useNavigation","api","logoImg","styles","Incidents","incidents","setIncidents","total","setTotal","page","setPage","loading","setLoading","navigation","navigateToDetail","incident","navigate","loadingIncidents","length","get","params","response","data","headers","container","header","headerText","headerTextBold","title","description","incidentsList","String","id","item","incidentProperty","incidentValue","name","Intl","NumberFormat","style","currency","format","value","detailsButton","detailsButtonText"],"mappings":"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","sourcesContent":["import React, { useState, useEffect  } from 'react'\nimport { Feather } from '@expo/vector-icons'\nimport { useNavigation } from '@react-navigation/native'\nimport { View, FlatList, Image, Text, TouchableOpacity, ActivityIndicator } from 'react-native'\n\nimport api from '../../services/api'\n\nimport logoImg from '../../assets/logo.png'\n\nimport styles from './styles'\n\nexport default function Incidents() {\n  const [incidents, setIncidents] = useState([])\n  const [total, setTotal] = useState(0)\n  const [page, setPage] = useState(1)\n  const [loading, setLoading] = useState(false)\n\n  const navigation = useNavigation()\n\n  function navigateToDetail(incident) {\n    //nome da rota\n    navigation.navigate('Detail', {incident})\n  }\n\n  async function loadingIncidents() {\n\n    //para que não sejam feitas várias requisições ao mesmo tempo (como por exemplo se o usuário ficar puxando várias vezes pra baixo)\n    if (loading){\n      return\n    }\n\n    //para caso já se tenha todos os casos carregados não fazer mais requisições do tipo\n    if (total > 0 && incidents.length === total) {\n      return\n    }\n\n    setLoading(true)\n\n    const response = await api.get('incidents', {\n      params: { page }\n    })\n\n    //Anexa os dois vetores para que ao rolar apareçam mais casos criando assim um \"display infinito\"\n    setIncidents([... incidents, ... response.data])\n    //o total de casos vem pelo header chamado x-total-count (feito no backend)\n    setTotal(response.headers['x-total-count'])\n    setPage(page + 1)\n    setLoading(false)\n  }\n\n  useEffect(() => {\n    loadingIncidents()\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <Image source={logoImg} />\n        <Text style={styles.headerText}>\n          Total de <Text style={styles.headerTextBold}>{total} casos</Text>.\n        </Text>\n      </View>\n\n      <Text style={styles.title}>Bem-vindo!</Text>\n      <Text style={styles.description}>Escolha um dos casos abaixo e salve o dia.</Text>\n\n      <ActivityIndicator\n        size=\"large\"\n        color=\"#0000ff\"\n        animating=\"false\"\n      />\n\n      <FlatList\n        data={incidents}\n        style={styles.incidentsList}\n        keyExtractor={incident => String(incident.id)}\n        showsVerticalScrollIndicator={false}\n        //chama uma função quando chega perto do fim da lista\n        onEndReached={loadingIncidents}\n        //define a quantos por cento de distância do fim da lista deve-se carregar mais itens\n        onEndReachedThreshold={0.2}\n        //trocamos o nome da variavel item (padrão) por incident para evitar confusões\n        renderItem={({ item: incident}) => (\n          <View style={styles.incident}>\n            <Text style={styles.incidentProperty}>ONG:</Text>\n            <Text style={styles.incidentValue}>{incident.name}</Text>\n\n            <Text style={styles.incidentProperty}>CASO:</Text>\n            <Text style={styles.incidentValue}>{incident.title}</Text>\n\n            <Text style={styles.incidentProperty}>VALOR:</Text>\n            <Text style={styles.incidentValue}>\n              {Intl.NumberFormat('pt-BR', { \n                style: 'currency', currency: 'BRL'\n              }).format(incident.value)}\n            </Text>\n\n            <TouchableOpacity\n              style={styles.detailsButton}\n              //se colocasse direto sem a arrow function, a função seria executada assim que carregasse a tela\n              onPress={() => navigateToDetail(incident)}\n            >\n              <Text style={styles.detailsButtonText}>Ver mais detalhes</Text>\n              <Feather name=\"arrow-right\" size={16} color=\"#E02041\" />\n            </TouchableOpacity>\n          </View>\n        )}\n      />\n    </View>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}